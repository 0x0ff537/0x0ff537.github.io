<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hacking, Red Teaming &amp; malware development on 0x0ff537</title>
    <link>https://0x0ff537.github.io/</link>
    <description>Recent content in Hacking, Red Teaming &amp; malware development on 0x0ff537</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Aug 2023 20:58:24 -0600</lastBuildDate><atom:link href="https://0x0ff537.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Meterpreter: Bypassing Defender</title>
      <link>https://0x0ff537.github.io/post/bypassingdefender/</link>
      <pubDate>Fri, 04 Aug 2023 20:58:24 -0600</pubDate>
      
      <guid>https://0x0ff537.github.io/post/bypassingdefender/</guid>
      <description>In this post I&amp;rsquo;ll describe the approach taken to be able to get a meterpreter session in a default updated installation of windows 10 with all the security features enabled. This is not new and there&amp;rsquo;s a lot of info out there if you google for it, so it&amp;rsquo;s more of an exercise to practice evasion techniques using one of the most fingerprinted hacking frameworks out there (or at least I think so).</description>
    </item>
    
    <item>
      <title>Customize the Loader</title>
      <link>https://0x0ff537.github.io/post/customizeloader/</link>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://0x0ff537.github.io/post/customizeloader/</guid>
      <description>First I would like to mention that this is more about my own learning process other than a proper tutorial. I&amp;rsquo;ve been playing around with Sliver framework a lot lately, if you&amp;rsquo;ve done it too then you know you can generate beacons in different formats including shellcode, this is cool, right? Because you can just inject it into memory and the shellcode will reflectively load a DLL that conatins the actual beacon payload, but this process leaves some memory artifacts that can be detected by AVs, EDRs or memory scanners like PE-sieve.</description>
    </item>
    
    <item>
      <title>DLL proxying &amp; sideloading</title>
      <link>https://0x0ff537.github.io/post/dllproxying/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://0x0ff537.github.io/post/dllproxying/</guid>
      <description>While studying DLL injection techniques, specifically DLL sideloading, I found this article by Palo Alto Network&amp;rsquo;s Unit 42 When Pentest Tools Go Brutal: Red-Teaming Tool Being Abused by Malicious Actors. The article describes how the dropper was using using a technique known as DLL search order hijacking to sideload a malicious crafted DLL that will inject a Brute Ratel agent (badger) into a remote process&amp;rsquo;s memory space, in this case RuntimeBroker.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://0x0ff537.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://0x0ff537.github.io/about/</guid>
      <description>Ethical hacker, musician, sound engineer, web developer and passionate about cybersecurity.
I have been interested in hacking since late 90’s. I have always felt curious about how hackers do what they do, that curiosity turned into a hobby and the hobby turned into a passion! My first approach to this magnificent world was reverse engineering some malware, and now a days I like to code it.
I’m also a junior full-stack web developer, this has helped me understand how things work behind the scenes in website hacking.</description>
    </item>
    
  </channel>
</rss>
